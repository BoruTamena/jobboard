// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
insert into user_profiles (
    user_id ,
    bio ,
    location 
) values ($1,$2,$3) returning id, user_id, bio, location
`

type CreateProfileParams struct {
	UserID   uuid.UUID
	Bio      sql.NullString
	Location sql.NullString
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.UserID, arg.Bio, arg.Location)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Location,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users(
    id ,
    user_name,
    email,
    password,
    role
) values ($1,$2,$3,$4,$5) returning id, user_name, email, password, role, created_at
`

type CreateUserParams struct {
	ID       uuid.UUID
	UserName string
	Email    string
	Password string
	Role     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.UserName,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, user_name, email, password, role, created_at from users where email=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
select users.id,user_name,email,password,bio,location from users 
join user_profiles 
on users.id =user_profiles.user_id
where users.id =$1
`

type GetUserProfileRow struct {
	ID       uuid.UUID
	UserName string
	Email    string
	Password string
	Bio      sql.NullString
	Location sql.NullString
}

func (q *Queries) GetUserProfile(ctx context.Context, id uuid.UUID) (GetUserProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserProfile, id)
	var i GetUserProfileRow
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Location,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
update user_profiles 
set bio=$2 , location=$3
where user_id=$1 
returning id, user_id, bio, location
`

type UpdateProfileParams struct {
	UserID   uuid.UUID
	Bio      sql.NullString
	Location sql.NullString
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateProfile, arg.UserID, arg.Bio, arg.Location)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Location,
	)
	return i, err
}
